##lets create an pertsistent volume
root@k8smaster:~# vi pv.yml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: task-pv-volume
spec:
  capacity:
    storage: 10Gi #this is thin provisiuoing
  volumeMode: Filesystem #it will look for the file system
  accessModes:
    - ReadWriteOnce #read # readwritemany
  hostPath:
    path: /mnt/data
root@k8smaster:~# kubectl apply -f pv.yml
persistentvolume/task-pv-volume created
##check the status of your pv it will show that status is available pv is like an resource to your k8s cluster
root@k8smaster:~# kubectl get pv
NAME             CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE
task-pv-volume   10Gi       RWO            Retain           Available                          <unset>                          5s
root@k8smaster:~#
#lets create the pvc . this pvc only can be mapped to your pod
vi pvc.yml
#######################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim
spec:
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
root@k8smaster:~# kubectl apply -f pvc.yml
persistentvolumeclaim/task-pv-claim created
root@k8smaster:~# kubectl get pv
NAME             CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                   STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE
task-pv-volume   10Gi       RWO            Retain           Bound    default/task-pv-claim                  <unset>                          6m3s

#lets create the configmap 
 456  vi configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: usermanagemet-dbcreation-script
data:
  mysql_usermgmt.sql: |-
    DROP DATABASE IF EXISTS usermgmt;
    CREATE DATABASE usermgmt;

  457  kubectl apply -f configmap.yml
  458  kubectl get configmap
  459  kubectl describe configmap usermanagemet-dbcreation-script

#lets create the secret 
root@k8smaster:~# vi secret.yml
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque 
data:
  password: ZGJwYXNzd29yZDEx

root@k8smaster:~# kubectl apply -f secret.yml
secret/db-secret created
root@k8smaster:~# kubectl get secret
NAME        TYPE     DATA   AGE
db-secret   Opaque   1      4s
root@k8smaster:~# kubectl describe secret db-secret
##lets deploy the mysql database 
vi mysql.yml
#######################
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: password
        ports:
        - containerPort: 3306
        volumeMounts: #this is inside your container 
          - name: mysql-storage
            mountPath: /var/lib/mysql #this is the storage path inside your cotnainer 
          - name: db-script #configmap 1mb of storage 
            mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-storage #whatever name you have put inside your container should match with you vbolume name
          persistentVolumeClaim:
            claimName: task-pv-claim
        - name: db-script
          configMap:
            name: usermanagemet-dbcreation-script
        
       #################
root@k8smaster:~# kubectl apply -f mysql.yml
deployment.apps/mysql created
root@k8smaster:~# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
mysql              0/1     1            0           7s
nginx-deployment   5/5     5            5           4h42m
root@k8smaster:~# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
mysql              1/1     1            1           10s
nginx-deployment   5/5     5            5           4h42
##3lets look intop the pod 
kubectl describe deploy mysql 
##check all are attached likle pvc configmap and secret
#lets login inside the database
root@k8smaster:~# kubectl get pod
NAME                                READY   STATUS    RESTARTS   AGE

mysql-9b5968599-nrrv6               1/1     Running   0          91s
##once you login 
root@k8smaster:~# kubectl exec -it mysql-9b5968599-nrrv6 -- /bin/bash
#password dbpassword11
root@mysql-9b5968599-nrrv6:/# mysql -u root -p
Enter password:
#check the database is created or not 
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| usermgmt           |
#then do 
exit 
exit
###after the exit 
root@k8smaster:~# kubectl get pod -o wide
NAME                                READY   STATUS    RESTARTS   AGE     IP                NODE       NOMINATED NODE   READINESS GATES

mysql-9b5968599-nrrv6               1/1     Running   0          4m23s   192.168.249.15    k8snode1   <none>           <none>
#mysql pod is running in k8snode1
##login to the node machine 
sudo -i
ls /mnt/data 
check the usedmgmt folder is there or not

