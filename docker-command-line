20  docker container run --publish 80:80 --detach nginx
   21  docker ps
   22  docker images
##check the cotainer is running or not 
  curl localhost
#this will show the download images
26  docker images
#if the image is already there it will not download agains
   27  docker container run --publish 81:80 --detach nginx
   #the below commadn will show there are two docker container running multiple nginx web server
   30  docker ps
####this time i ll download a different image it will be shown that it is downloading
   31  docker container run --publish 82:80 --detach httpd
   32  docker ps
   33  curl localhost:82
##container name 
root@ip-172-31-97-27:~# docker container run --publish 83:80 --detach --name webhost nginx
cf7dcf72ebfad0037da8178500c383f18f0124603613726057122247bf91ff62
root@ip-172-31-97-27:~# docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                 NAMES
cf7dcf72ebfa   nginx     "/docker-entrypoint.â€¦"   4 seconds ago    Up 3 seconds    0.0.0.0:83->80/tcp, [::]:83->80/tcp   webhost
##lets try to understand the detach mode 
 docker container run --publish 84:80 nginx
##lets check the contianer press ctrl c
docker ps
docker ps -a
###ps -a will show all the running and stopped container
##container vs process id 
 46  docker container run --name mongo -d mongo
   47  docker ps
#check the mongo db process id
   48  docker top mongo
   49  ps aux
###kindly replace the mongo db container process id 
   50  docker top mongo
   51  kill -9 13444
   52  docker ps
##docker ps -a will show that mongo db is in exit state
   54  docker ps -a
#if you want to start or stop a container
   55  docker start mongo
   56  docker ps
   57  docker stop mongo
#docker networking 
 81  docker network ls
  #we will create a custom network 
docker network create my_app_net
##once we create a custom network check the ip address of the custom network
   83  docker network inspect my_app_net
##now we will create two container on this custom network 
86  docker run -d --name my_nginx --network my_app_net nginx
   87  docker run -d --name new_nginx --network my_app_net nginx
   88  docker ps
   89  docker network ls
#this will show that both the contianer are in same network 
   90  docker network inspect my_app_net
##if they are in same network they should any how talk to each other 
 94  docker container exec -it my_nginx curl new_nginx
   95  docker container exec -it new_nginx curl my_nginx




