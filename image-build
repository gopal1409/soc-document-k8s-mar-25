sudo -i
   179  apt install default-jdk
  180  apt install maven
  181  git clone https://github.com/gopal1409/spring-hello1.git
  182  cd spring-hello1/
  183  mvn clean package
  184  cd target/
  185  ls
  186  java -jar spring-boot-2-hello-world-1.0.2-SNAPSHOT.jar
####check the application is running from the browser or not put your machine dns name
  http://lab-as-14371.lc.cl-labs.springpeople.com:8080/hello
##press ctrl c
####then 
cd ..
  #lets convert the app into an container based image 

 198  vi dockerfile

FROM openjdk:22
WORKDIR /app
COPY ./target/*.jar /app/hello.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","/app/hello.jar"]
##lets build it 
  199  docker build -t helloapp .
root@ip-172-31-97-27:~/spring-hello1# docker images
REPOSITORY   TAG             IMAGE ID       CREATED         SIZE
helloapp     latest          cfe12853dc4d   4 minutes ago   575MB
############once you can see your image spin up an container 
  207  docker run -d -p 81:8080 helloapp
  208  docker ps
  209  curl localhost:81/hello
####you can check the output from the browser 
#multi build in maven 
root@ip-172-31-97-27:~/spring-hello1# cat dockerfile
#catch maven dependency as an intermediate docker image
FROM maven as dep
COPY pom.xml /build/
WORKDIR /build/
RUN mvn --batch-mode dependency:go-offline dependency:resolve-plugins

#build the app using maven and cached dependecy

FROM maven as build
COPY --from=dependencies /root/.m2 /root/.m2
COPY pom.xml /build/
copy src /build/src
WORKDIR /build
RUN mvn -P dockerfile --bathc-mode --fail-fast package
#this is the stage which is running the application

FROM openjdk:22  as runtime
COPY --from=build /build/target/*.jar ./application.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","./application.jar"]
